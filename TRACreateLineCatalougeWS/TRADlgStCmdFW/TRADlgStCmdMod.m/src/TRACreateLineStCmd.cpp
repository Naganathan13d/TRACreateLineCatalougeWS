// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRACreateLineStCmd.cpp
// The state chart based command: TRACreateLineStCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2022  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "TRACreateLineStCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
#include "CATPathElementAgent.h"
#include "CATIGSMPoint.h"
#include "CATICkeParm.h"
#include "CATIGSMPointCoord.h"
#include "CATIGSMFactory.h"
#include "CATIGSMLinePtPt.h"
#include "CATApplicationFrame.h"
#include "CATDlgWindow.h"
#include "CATDlgNotify.h"
#include "CATIAlias.h"
#include "CATStateCondition.h"

#include "CATStateCommand.h"
#include "CATPathElement.h"

#include "CATCreateExternalObject.h"
#include "TRAUtilitiesClass.h"
#include "TRAICreateLineFactory.h"
#include "CATIDescendants.h"


#include "CATPrtUpdateCom.h"
#include "CATMmrLinearBodyServices.h"
#include "CATIGSMTool.h"

#include "CATStateActivateNotification.h"
#include "CATMMUIStateCommand.h"
#include "CATIRedrawEvent.h"
#include "CATIModelEvents.h"
#include "CATModify.h"
#include "CATIVisProperties.h"









CATCreateClass( TRACreateLineStCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRACreateLineStCmd::TRACreateLineStCmd(TRAICreateLineClass *_ipiCreatLine) :
  CATStateCommand ("TRACreateLineStCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_pWindow(NULL), _pCATHSO(NULL), _pEditor(NULL) , pPoint1Agent(NULL), pPoint2Agent(NULL), pOKAgent(NULL)
  , pCancelAgent(NULL), _piPoint1(NULL), _piPoint2(NULL), _piCreatLine(NULL)
{

	_mode = 1; // creation mode

	if ( _ipiCreatLine != NULL ) 
    {
        // Edition mode.
        _mode = 0;
               
        // Memorises what curve is being edited.
        _piCreatLine = _ipiCreatLine;
        _piCreatLine->AddRef();

	HRESULT rc= E_FAIL ;
        
        rc = _piCreatLine->GetPoint (1 , &_piPoint1 );
        if ( FAILED(rc) ) 
            return ;

		rc = _piCreatLine->GetPoint (2 , &_piPoint2 );
        if ( FAILED(rc) ) 
            return ;
	
    }

	_pEditor = CATFrmEditor::GetCurrentEditor();
	_pCATHSO = _pEditor->GetHSO();
	_pWindow = new TRADlgClass();
	_pWindow->Build();
	_pWindow->SetVisibility(CATDlgShow);

	// Fills in the dialog panel fields.
    UpdatePanelFields();

	 // CheckOKSensitivity();

  }

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRACreateLineStCmd::~TRACreateLineStCmd()
{

	if (pPoint1Agent != NULL)
   {
      pPoint1Agent->RequestDelayedDestruction();
      pPoint1Agent = NULL;
   }

   if (pPoint2Agent != NULL)
   {
      pPoint2Agent->RequestDelayedDestruction();
      pPoint2Agent = NULL;
   }

   if (_pWindow != NULL)
   {
      _pWindow->RequestDelayedDestruction();
      _pWindow = NULL;
   }
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TRACreateLineStCmd::BuildGraph()
{

	pPoint1SelectionState = GetInitialState("Point1Selection");
	pPoint2SelectionState = AddDialogState("Point2Selection");

	pPoint1Agent = new CATPathElementAgent("Point1Agent");
	pPoint2Agent = new CATPathElementAgent("Point2Agent");

	pOKAgent = new CATDialogAgent("OKAgent");
	pCancelAgent = new CATDialogAgent("CancelAgent"); 

	pPoint1SelectorListAgent = new CATDialogAgent("Point1SelectorListAgent");
	pPoint2SelectorListAgent = new CATDialogAgent("Point2SelectorListAgent");

	pPoint1Agent->AddElementType(IID_CATIGSMPoint);
	pPoint2Agent->AddElementType(IID_CATIGSMPoint);

	pOKAgent->AcceptOnNotify(_pWindow, _pWindow->GetDiaOKNotification());
	pCancelAgent->AcceptOnNotify(_pWindow, _pWindow->GetDiaCANCELNotification());
	pCancelAgent->AcceptOnNotify(_pWindow, _pWindow->GetWindCloseNotification());

	pPoint1SelectorListAgent->AcceptOnNotify(_pWindow->GetPoint1SelectorList(), _pWindow->GetPoint1SelectorList()->GetListSelectNotification());
	pPoint2SelectorListAgent->AcceptOnNotify(_pWindow->GetPoint2SelectorList(), _pWindow->GetPoint2SelectorList()->GetListSelectNotification());

	pPoint1SelectionState->AddDialogAgent(pPoint1Agent);
	pPoint1SelectionState->AddDialogAgent(pCancelAgent);
	pPoint1SelectionState->AddDialogAgent(pPoint1SelectorListAgent);
	pPoint1SelectionState->AddDialogAgent(pPoint2SelectorListAgent);

	pPoint2SelectionState->AddDialogAgent(pPoint2Agent);
	pPoint2SelectionState->AddDialogAgent(pOKAgent);
	pPoint2SelectionState->AddDialogAgent(pCancelAgent);
	pPoint2SelectionState->AddDialogAgent(pPoint1SelectorListAgent);
	pPoint2SelectionState->AddDialogAgent(pPoint2SelectorListAgent);

	CATStateCondition * pPoint1Condition = IsOutputSetCondition(pPoint1Agent);
	CATDiaAction * pPoint1Action = Action((ActionMethod) (&TRACreateLineStCmd::SelectFirstPoint));
	AddTransition(pPoint1SelectionState, pPoint2SelectionState, pPoint1Condition, pPoint1Action);

	CATStateCondition * pPoint2Condition = IsOutputSetCondition(pPoint2Agent);
	CATDiaAction * pPoint2Action = Action((ActionMethod) (&TRACreateLineStCmd::SelectSecondPoint));
	AddTransition(pPoint2SelectionState, pPoint2SelectionState, pPoint2Condition, pPoint2Action);

	CATStateCondition * pOKCondition = IsOutputSetCondition(pOKAgent);
	CATDiaAction * pOKAction = Action((ActionMethod) (&TRACreateLineStCmd::OK));
	AddTransition(pPoint2SelectionState, NULL, pOKCondition, pOKAction);

	CATStateCondition * pCancelCondition = IsOutputSetCondition(pCancelAgent);
	CATDiaAction * pCancelAction = Action((ActionMethod) (&TRACreateLineStCmd::Exit));
	AddTransition(pPoint1SelectionState, NULL, pCancelCondition, pCancelAction);
	AddTransition(pPoint2SelectionState, NULL, pCancelCondition, pCancelAction);

	CATStateCondition * pPoint1SelectorListCondition = IsOutputSetCondition(pPoint1SelectorListAgent);
	CATDiaAction * pPoint1SelectorListAction = Action((ActionMethod) (&TRACreateLineStCmd::FirstPointEditorIsSelected));
	AddTransition(pPoint2SelectionState, pPoint1SelectionState, pPoint1SelectorListCondition, pPoint1SelectorListAction);

	CATStateCondition * pPoint2SelectorListCondition = IsOutputSetCondition(pPoint2SelectorListAgent);
	CATDiaAction * pPoint2SelectorListAction = Action((ActionMethod) (&TRACreateLineStCmd::SecondPointEditorIsSelected));
	AddTransition(pPoint1SelectionState, pPoint2SelectionState, pPoint2SelectorListCondition, pPoint2SelectorListAction);
 
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TRACreateLineStCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean TRACreateLineStCmd::Cancel()
{
  
  return TRUE;
}

CATBoolean TRACreateLineStCmd::OK()
{

	CreateLine();
  
  return TRUE;
}

CATBoolean TRACreateLineStCmd::Exit()
{
	if(pPoint1Agent !=NULL)
	{
		pPoint1Agent->RequestDelayedDestruction();
		pPoint1Agent = NULL;
	}

	if(pPoint2Agent != NULL)
	{
		pPoint2Agent->RequestDelayedDestruction();
		pPoint2Agent = NULL;
	}

	return TRUE;


}

CATBoolean TRACreateLineStCmd::FirstPointEditorIsSelected()
{
	_pWindow->ClearSelectForPoint2SelectorList();
	pPoint1SelectorListAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean TRACreateLineStCmd::SecondPointEditorIsSelected()
{
	_pWindow->ClearSelectForPoint1SelectorList();
	pPoint2SelectorListAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean TRACreateLineStCmd::SelectFirstPoint()
{

	if(!!pPoint1Agent)
	{
		CATBaseUnknown* pPointBaseUnknown = pPoint1Agent->GetElementValue();
		
        CATPathElement * pPathElementPoint1 = NULL;
		pPathElementPoint1 = pPoint1Agent->GetValue( );
		if(!!pPathElementPoint1)
		{
			_pCATHSO->Empty();
				_pCATHSO->AddElement(pPathElementPoint1);
		  }


		pPoint1Agent->InitializeAcquisition();



		
		CATIAlias_var spAlias = pPointBaseUnknown;

		if(!!spAlias)
		{
			CATUnicodeString Name = spAlias->GetAlias();
			_pWindow->SetPoint1SelectorList(Name);
		}

		if(!!pPointBaseUnknown)
		{

			if(!!spFirstPoint)
			{
				_pCATHSO->RemoveElement(spFirstPoint);
			}
			spFirstPoint = pPointBaseUnknown;

			
			if(!!spFirstPoint)
			{
				CATIGSMPointCoord * pPointCord = NULL;
				HRESULT HR1 = spFirstPoint->QueryInterface(IID_CATIGSMPointCoord, (void**)&pPointCord);
				if(!!pPointCord)
				{
					return TRUE;
				}
			}
		}
	}

	return FALSE;


}


CATBoolean TRACreateLineStCmd::SelectSecondPoint()
{
	if(!pPoint2Agent)
		return FALSE;

	CATBaseUnknown * pPointBaseUnknown = pPoint2Agent->GetElementValue();

	CATPathElement * pPathElementPoint2 = NULL;
		pPathElementPoint2 = pPoint2Agent->GetValue( );
		if(!!pPathElementPoint2)
		{
			_pCATHSO->Empty();
				_pCATHSO->AddElement(pPathElementPoint2);
		  }

	pPoint2Agent->InitializeAcquisition();

		
		CATIAlias_var spAlias = pPointBaseUnknown;

		if(!!spAlias)
		{
			CATUnicodeString Name = spAlias->GetAlias();
			_pWindow->SetPoint2SelectorList(Name);
		}
		if(!!spSecondPoint)
			{
				_pCATHSO->RemoveElement(spSecondPoint);
			}

	spSecondPoint = pPointBaseUnknown;
	if(!spSecondPoint)
		return FALSE;

	if(!!(spSecondPoint->IsEqual(spFirstPoint)))
	{
		return FALSE;
	}	

	return TRUE;
}

void TRACreateLineStCmd::CreateLine()
{
	CATIPrtContainer * pPrtContainer = NULL;
	TRAUtilitiesClass  * pUtilitiesClass = NULL;
	pPrtContainer = pUtilitiesClass->GetEditor();

	CATIPrtContainer_var spPartContainer = pPrtContainer;

	CATISpecObject_var spSpecFirstPoint = spFirstPoint;

    CATIContainer_var spContainer = spSpecFirstPoint->GetFeatContainer();  



	TRAICreateLineFactory *  pCreateLineFactory = NULL;

	HRESULT rc = spContainer->QueryInterface( IID_TRAICreateLineFactory , 
                                                    (void**)& pCreateLineFactory );

	CATISpecObject * piSpecOnCreateLine = NULL ;

	//CATISpecObject_var spSpecFirstPoint = spFirstPoint;

	CATISpecObject_var spSpecSecondPoint = spSecondPoint;


	if(!!pCreateLineFactory)
	{

		HRESULT rc = pCreateLineFactory->CreateLine(spSpecFirstPoint, spSpecSecondPoint, &piSpecOnCreateLine);  
		
		pCreateLineFactory->Release();
		pCreateLineFactory = NULL;


		
	}

	rc = piSpecOnCreateLine->QueryInterface( IID_TRAICreateLineClass , 
                                                        (void**) &_piCreatLine );
	



	CATISpecObject * pFatherCC = NULL ;
           pFatherCC = spSpecFirstPoint->GetFather();

	CATIDescendants * pIDescendantsOnGSMTool = NULL ;
         rc = pFatherCC->QueryInterface(IID_CATIDescendants, (void**) & pIDescendantsOnGSMTool);

		 pIDescendantsOnGSMTool->Append(piSpecOnCreateLine);

		 piSpecOnCreateLine->Release();
	     piSpecOnCreateLine = NULL;

		 	  //
    // 1- Queries the CATISpecObject interface to update the Combined Curve
    //
    CATISpecObject *piSpecObjOnCreateLine = NULL;

    if ( SUCCEEDED(rc) && (NULL != _piCreatLine) )
    {
       rc = _piCreatLine->QueryInterface( IID_CATISpecObject , (void**) &piSpecObjOnCreateLine );
    }

    //
    // 2- Updates
    //
    if ( SUCCEEDED(rc) && (NULL != piSpecObjOnCreateLine ) )
    {
		CATPrtUpdateCom *pUpdateCommand =  new CATPrtUpdateCom ( piSpecObjOnCreateLine, 1 ); 
                                                           
    }

	 // 3- Inserts if necessary ( if inside an ordered (and linear) body )
    
    
       
        if (SUCCEEDED(rc) && (NULL != piSpecObjOnCreateLine ) )
    {
       CATBoolean IsInsideOrderedBody = FALSE ;
       rc = IsCombCrvInsideOrderedBody(IsInsideOrderedBody);

	    if ( SUCCEEDED(rc) && (TRUE == IsInsideOrderedBody) )
       {
         
          CATBaseUnknown_var spBUOnCC = piSpecObjOnCreateLine ;
          rc = CATMmrLinearBodyServices::Insert(spBUOnCC);
       }
		
	}

	

}



void TRACreateLineStCmd::CheckOKSensitivity()
{
    if ( _piPoint1 != NULL && _piPoint2 != NULL )
        _pWindow->SetOKSensitivity(CATDlgEnable);
    else
        _pWindow->SetOKSensitivity(CATDlgDisable);

    return;
}

HRESULT TRACreateLineStCmd::IsCombCrvInsideOrderedBody(CATBoolean & oIsInsideOrderedBody )
{
    //
    // returns TRUE if the CC is inside an ordered body
    // otherwise FALSE 
    //
    HRESULT rc = E_FAIL ;

    oIsInsideOrderedBody = FALSE ;
    
    if ( NULL != _piCreatLine )
    {
       CATISpecObject * pSpecObjectOnCreateLine = NULL ;
       rc = _piCreatLine->QueryInterface(IID_CATISpecObject,
                                                  (void**) &pSpecObjectOnCreateLine);
       if ( SUCCEEDED(rc) )
       { 
           // Retrieve the father of the CC 
           CATISpecObject * pFatherCC = NULL ;
           pFatherCC = pSpecObjectOnCreateLine->GetFather();
           if ( NULL != pFatherCC )
           {
               // The father must be a GSMTool or an HybridBody
               CATIGSMTool *piGSMToolFatherCC = NULL;
               rc = pFatherCC->QueryInterface ( IID_CATIGSMTool, (void**) &piGSMToolFatherCC);
               if ( SUCCEEDED(rc) )
               {
                  // The father can be a ordered or not
                  int IsAnOrderedBody = -1 ;
                  piGSMToolFatherCC->GetType(IsAnOrderedBody) ;
                  if ( 1 == IsAnOrderedBody )
                  {
                     oIsInsideOrderedBody = TRUE ;
                  } 

                  piGSMToolFatherCC->Release();
                  piGSMToolFatherCC = NULL ;
               }

               pFatherCC->Release();
               pFatherCC = NULL ;
           }else rc = E_FAIL ;

           pSpecObjectOnCreateLine->Release();
           pSpecObjectOnCreateLine = NULL ;
       }
    }

    return rc ;

}


void TRACreateLineStCmd::UpdatePanelFields()
{
    // gets the name of the selected elements and put these names into the Combined Curve edition dialog box relevant text fields

    if ( _piPoint1 != NULL )
        _pWindow->SetName(1, _piPoint1->GetDisplayName());
    else
        _pWindow->SetName(1, CATUnicodeString("no selection"));
    
    if ( _piPoint2 != NULL )
        _pWindow->SetName(2, _piPoint2->GetDisplayName());
    else
        _pWindow->SetName(2, CATUnicodeString("no selection"));
   

    return ;
}