// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAECreateLineFactory.cpp
// Provide implementation to interface
//    TRAICreateLineFactory
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Jan 2022  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "TRAECreateLineFactory.h"
#include <iostream>
 
CATImplementClass(TRAECreateLineFactory,
                  DataExtension,
                  CATBaseUnknown,
                  CATPrtCont );
 

//-----------------------------------------------------------------------------
// TRAECreateLineFactory : constructor
//-----------------------------------------------------------------------------
TRAECreateLineFactory::TRAECreateLineFactory():
    CATBaseUnknown()
{
	std::cout << "Factory is Created" << std::endl;
}

//-----------------------------------------------------------------------------
// TRAECreateLineFactory : destructor
//-----------------------------------------------------------------------------
TRAECreateLineFactory::~TRAECreateLineFactory()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_TRAICreateLineFactory.h"
#include "CATIContainer.h"
#include "TRAICreateLineClass.h"
#include "CATICatalog.h"
#include "CATCatalogFactoryServices.h"
#include "CATMmrAlgoConfigServices.h"
#include "CATIInputDescription.h"
#include "CATMmrFeatureAttributes.h"







TIE_TRAICreateLineFactory( TRAECreateLineFactory);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements TRAICreateLineFactory::CreateLine
//-----------------------------------------------------------------------------
HRESULT TRAECreateLineFactory::CreateLine (CATISpecObject * ipPoint1  , CATISpecObject * ipPoint2  , CATISpecObject ** opLine )
{

  // -1- Retrieves a CATIContainer interface pointer on this (CATPrtCont)

	CATIContainer *piContainerOnThis = NULL;
    HRESULT rc = QueryInterface( IID_CATIContainer , ( void**) &piContainerOnThis );
    if ( FAILED(rc) )
    {
       return E_FAIL;
    }

	// -2- Opens the Combined Curve catalog

	CATICatalog * piCreateLineCatalog = NULL;
    CATUnicodeString StorageName = "TRALineCatalog.CATfct";
    CATUnicodeString ClientId = "SAMPLES";
    rc = AccessCatalog( &StorageName, &ClientId, piContainerOnThis, &piCreateLineCatalog);
    if ( FAILED(rc) )  return E_FAIL;

	// -3- Retrieves Combined Curve's startup

	CATBaseUnknown *pCreateLineStartup = NULL;
    CATUnicodeString StartupType = "CreateLine";
    
    rc = piCreateLineCatalog->RetrieveSU( &pCreateLineStartup , &StartupType , "CATISpecObject" );
    if ( FAILED(rc) )  
       return E_FAIL;

    piCreateLineCatalog->Release();
    piCreateLineCatalog = NULL ;
    
    CATISpecObject *piSpecOnCreateLineStartup = NULL;
    rc = pCreateLineStartup->QueryInterface( IID_CATISpecObject , ( void**) &piSpecOnCreateLineStartup );
    pCreateLineStartup->Release();
    pCreateLineStartup = NULL ;

    if( FAILED(rc) ) 
        return E_FAIL;

	// -4- Creates a Combined Curve instance

	*opLine = piSpecOnCreateLineStartup->Instanciate( NULL_string , piContainerOnThis );
    piSpecOnCreateLineStartup->Release();
    piSpecOnCreateLineStartup = NULL ;
    
    piContainerOnThis->Release();
    piContainerOnThis = NULL ;

	 // -5- Subscribes to repository for Configuration Data Storage

	 rc = CATMmrAlgoConfigServices::CreateConfigurationData(*opLine);
    if( FAILED(rc) )
      return rc;

	 // -6- Gets Feature Type Information for BackUp / StartUp management

	

	/*CATIInputDescription* pInputDescriptionOnCreateLine = NULL;
    rc = (*opLine)->QueryInterface( IID_CATIInputDescription, (void**) &pInputDescriptionOnCreateLine);
    if(FAILED(rc))
      return E_FAIL;*/
    
    /*CATIInputDescription::FeatureType Feature_type = CATIInputDescription::FeatureType_Unset;
    
    rc = pInputDescriptionOnCreateLine -> GetFeatureType(Feature_type);
    if(FAILED(rc))
    {
      pInputDescriptionOnCreateLine -> Release();
      pInputDescriptionOnCreateLine = NULL ;
      return E_FAIL;
    }*/

	CATIInputDescription::FeatureType Feature_type = CATIInputDescription::FeatureType_Unset;
  
    rc = CATMmrFeatureAttributes::SetFeatureType(*opLine, Feature_type);
    /*if(FAILED(rc))
    {
      pInputDescriptionOnCreateLine -> Release();
      pInputDescriptionOnCreateLine = NULL ;
      return E_FAIL;
    }*/
    
    /*pInputDescriptionOnCreateLine -> Release();
    pInputDescriptionOnCreateLine = NULL ;*/

	 // -7- Sets default values for the attributes of the instance

	TRAICreateLineClass * _piCreatLine;
	rc = (*opLine)->QueryInterface( IID_TRAICreateLineClass, (void**) &_piCreatLine );
    if( FAILED(rc) ) 
        return E_FAIL;
    
    _piCreatLine->SetPoint    ( 1 , ipPoint1     );
   
    _piCreatLine->SetPoint    ( 2 , ipPoint2     );
   
    
    _piCreatLine->Release();
    _piCreatLine = NULL ;
    
    return S_OK;



}

