// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAECreateLineMechProp.cpp
// Provide implementation to interface
//    CATIMechanicalProperties
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Feb 2022  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "TRAECreateLineMechProp.h"

// ObjectSpecsModeler Framework
#include "CATISpecObject.h"   // temporary

// Visualization Framework
#include "CATIModelEvents.h"  // to update the display
#include "CATModify.h"        // to update the display

// ObjectModelerBase Framework
#include "CATIRedrawEvent.h"  // to refresh the specification tree

// for cout
#include "iostream.h"
 
CATImplementClass(TRAECreateLineMechProp,
                  DataExtension,
                  CATBaseUnknown,
                  CreateLine );
 

//-----------------------------------------------------------------------------
// TRAECreateLineMechProp : constructor
//-----------------------------------------------------------------------------
TRAECreateLineMechProp::TRAECreateLineMechProp():
    CATBaseUnknown()
{

	cout <<" TRAECreateLineMechProp::TRAECreateLineMechProp" << endl;
    _status = 0 ;
}

//-----------------------------------------------------------------------------
// TRAECreateLineMechProp : destructor
//-----------------------------------------------------------------------------
TRAECreateLineMechProp::~TRAECreateLineMechProp()
{
	cout <<" TRAECreateLineMechProp::~TRAECreateLineMechProp" << endl;
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATIMechanicalProperties.h"
TIE_CATIMechanicalProperties( TRAECreateLineMechProp);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements CATIMechanicalProperties::IsInactive
//-----------------------------------------------------------------------------
int TRAECreateLineMechProp::IsInactive () const
{
	cout <<" TRAECreateLineMechProp::IsInactive:" << _status << endl;
    return _status ;

   
}

//-----------------------------------------------------------------------------
// Implements CATIMechanicalProperties::Activate
//-----------------------------------------------------------------------------
void TRAECreateLineMechProp::Activate ()
{

   cout <<" TRAECreateLineMechProp::Activate" << endl;

    // begin of temporary code 
    // If you use a knowlege parameter 
    //    - you can manage the parameter in fx command
    //    - to need to use SetUptoDate, the CATModifyEvent will automatically do it 
    // 
    _status = 0 ;
    CATISpecObject * piSpecObject= NULL;                
    HRESULT rc = QueryInterface(IID_CATISpecObject, (void**)&piSpecObject);
    if ( SUCCEEDED(rc) )
    {
        piSpecObject->SetUpToDate(FALSE) ;

        piSpecObject->Release();
        piSpecObject = NULL ;
    }
    // end of temporary code 

    // Refresh the specification tree
    CATIRedrawEvent * piRedrawEvent = NULL;                
    rc = QueryInterface(IID_CATIRedrawEvent, (void**)&piRedrawEvent);
    if ( SUCCEEDED(rc) )
    {
       piRedrawEvent->Redraw();

       piRedrawEvent->Release();
       piRedrawEvent = NULL ;
    }

    //Update the display
    CATIModelEvents * piModelEvent = NULL;                
    rc = QueryInterface(IID_CATIModelEvents, (void**)&piModelEvent);
    
    if (SUCCEEDED(rc))
    {
         
        CATModify notif = this;
        piModelEvent->Dispatch(notif);
         
        piModelEvent->Release();
        piModelEvent=NULL;
    }
    
}

//-----------------------------------------------------------------------------
// Implements CATIMechanicalProperties::InActivate
//-----------------------------------------------------------------------------
void TRAECreateLineMechProp::InActivate ()
{

   cout <<" TRAECreateLineMechProp::InActivate" << endl;

    // begin of temporary code 
    // If you use a knowlege parameter 
    //    - you can manage the parameter in fx command
    //    - to need to use SetUptoDate, the CATModifyEvent will automatically do it 
    // 
    _status = 1 ;
    CATISpecObject * piSpecObject= NULL;                
    HRESULT rc = QueryInterface(IID_CATISpecObject, (void**)&piSpecObject);
    if ( SUCCEEDED(rc) )
    {
        piSpecObject->SetUpToDate(FALSE) ;
        piSpecObject->Release();
        piSpecObject = NULL ;
    }
    // end of temporary code 


    // Refresh the specification tree
    CATIRedrawEvent * piRedrawEvent = NULL;                
    rc = QueryInterface(IID_CATIRedrawEvent, (void**)&piRedrawEvent);
    if ( SUCCEEDED(rc) )
    {
       piRedrawEvent->Redraw();

       piRedrawEvent->Release();
       piRedrawEvent = NULL ;
    }

    //Update the display
    CATIModelEvents * piModelEvent = NULL;                
    rc = QueryInterface(IID_CATIModelEvents, (void**)&piModelEvent);
    
    if (SUCCEEDED(rc))
    {
         
        CATModify notif = this;
        piModelEvent->Dispatch(notif);
         
        piModelEvent->Release();
        piModelEvent=NULL;
    }	 

}

